/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";

import {
  IsDate,
  IsOptional,
  IsNumber,
  Min,
  Max,
  IsString,
  MaxLength,
  ValidateNested,
} from "class-validator";

import { Type } from "class-transformer";
import { MotorcycleWhereUniqueInput } from "../../motorcycle/base/MotorcycleWhereUniqueInput";
import { MechanicWhereUniqueInput } from "../../mechanic/base/MechanicWhereUniqueInput";
import { PartsUsedUpdateManyWithoutRepairsInput } from "./PartsUsedUpdateManyWithoutRepairsInput";

@InputType()
class RepairUpdateInput {
  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  date?: Date | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  cost?: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description?: string | null;

  @ApiProperty({
    required: false,
    type: () => MotorcycleWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => MotorcycleWhereUniqueInput)
  @IsOptional()
  @Field(() => MotorcycleWhereUniqueInput, {
    nullable: true,
  })
  motorcycle?: MotorcycleWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => MechanicWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => MechanicWhereUniqueInput)
  @IsOptional()
  @Field(() => MechanicWhereUniqueInput, {
    nullable: true,
  })
  mechanic?: MechanicWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => PartsUsedUpdateManyWithoutRepairsInput,
  })
  @ValidateNested()
  @Type(() => PartsUsedUpdateManyWithoutRepairsInput)
  @IsOptional()
  @Field(() => PartsUsedUpdateManyWithoutRepairsInput, {
    nullable: true,
  })
  partsUseds?: PartsUsedUpdateManyWithoutRepairsInput;
}

export { RepairUpdateInput as RepairUpdateInput };
