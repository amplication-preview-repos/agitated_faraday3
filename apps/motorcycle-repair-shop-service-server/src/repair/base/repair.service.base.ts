/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Repair as PrismaRepair,
  PartsUsed as PrismaPartsUsed,
  Motorcycle as PrismaMotorcycle,
  Mechanic as PrismaMechanic,
} from "@prisma/client";

export class RepairServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RepairCountArgs, "select">): Promise<number> {
    return this.prisma.repair.count(args);
  }

  async repairs(args: Prisma.RepairFindManyArgs): Promise<PrismaRepair[]> {
    return this.prisma.repair.findMany(args);
  }
  async repair(
    args: Prisma.RepairFindUniqueArgs
  ): Promise<PrismaRepair | null> {
    return this.prisma.repair.findUnique(args);
  }
  async createRepair(args: Prisma.RepairCreateArgs): Promise<PrismaRepair> {
    return this.prisma.repair.create(args);
  }
  async updateRepair(args: Prisma.RepairUpdateArgs): Promise<PrismaRepair> {
    return this.prisma.repair.update(args);
  }
  async deleteRepair(args: Prisma.RepairDeleteArgs): Promise<PrismaRepair> {
    return this.prisma.repair.delete(args);
  }

  async findPartsUseds(
    parentId: string,
    args: Prisma.PartsUsedFindManyArgs
  ): Promise<PrismaPartsUsed[]> {
    return this.prisma.repair
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .partsUseds(args);
  }

  async getMotorcycle(parentId: string): Promise<PrismaMotorcycle | null> {
    return this.prisma.repair
      .findUnique({
        where: { id: parentId },
      })
      .motorcycle();
  }

  async getMechanic(parentId: string): Promise<PrismaMechanic | null> {
    return this.prisma.repair
      .findUnique({
        where: { id: parentId },
      })
      .mechanic();
  }
}
