/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Motorcycle } from "./Motorcycle";
import { MotorcycleCountArgs } from "./MotorcycleCountArgs";
import { MotorcycleFindManyArgs } from "./MotorcycleFindManyArgs";
import { MotorcycleFindUniqueArgs } from "./MotorcycleFindUniqueArgs";
import { CreateMotorcycleArgs } from "./CreateMotorcycleArgs";
import { UpdateMotorcycleArgs } from "./UpdateMotorcycleArgs";
import { DeleteMotorcycleArgs } from "./DeleteMotorcycleArgs";
import { RepairFindManyArgs } from "../../repair/base/RepairFindManyArgs";
import { Repair } from "../../repair/base/Repair";
import { CustomerFindManyArgs } from "../../customer/base/CustomerFindManyArgs";
import { Customer } from "../../customer/base/Customer";
import { MotorcycleService } from "../motorcycle.service";
@graphql.Resolver(() => Motorcycle)
export class MotorcycleResolverBase {
  constructor(protected readonly service: MotorcycleService) {}

  async _motorcyclesMeta(
    @graphql.Args() args: MotorcycleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Motorcycle])
  async motorcycles(
    @graphql.Args() args: MotorcycleFindManyArgs
  ): Promise<Motorcycle[]> {
    return this.service.motorcycles(args);
  }

  @graphql.Query(() => Motorcycle, { nullable: true })
  async motorcycle(
    @graphql.Args() args: MotorcycleFindUniqueArgs
  ): Promise<Motorcycle | null> {
    const result = await this.service.motorcycle(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Motorcycle)
  async createMotorcycle(
    @graphql.Args() args: CreateMotorcycleArgs
  ): Promise<Motorcycle> {
    return await this.service.createMotorcycle({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Motorcycle)
  async updateMotorcycle(
    @graphql.Args() args: UpdateMotorcycleArgs
  ): Promise<Motorcycle | null> {
    try {
      return await this.service.updateMotorcycle({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Motorcycle)
  async deleteMotorcycle(
    @graphql.Args() args: DeleteMotorcycleArgs
  ): Promise<Motorcycle | null> {
    try {
      return await this.service.deleteMotorcycle(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Repair], { name: "repairs" })
  async findRepairs(
    @graphql.Parent() parent: Motorcycle,
    @graphql.Args() args: RepairFindManyArgs
  ): Promise<Repair[]> {
    const results = await this.service.findRepairs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Customer], { name: "customers" })
  async findCustomers(
    @graphql.Parent() parent: Motorcycle,
    @graphql.Args() args: CustomerFindManyArgs
  ): Promise<Customer[]> {
    const results = await this.service.findCustomers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
