/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PartsUsedService } from "../partsUsed.service";
import { PartsUsedCreateInput } from "./PartsUsedCreateInput";
import { PartsUsed } from "./PartsUsed";
import { PartsUsedFindManyArgs } from "./PartsUsedFindManyArgs";
import { PartsUsedWhereUniqueInput } from "./PartsUsedWhereUniqueInput";
import { PartsUsedUpdateInput } from "./PartsUsedUpdateInput";

export class PartsUsedControllerBase {
  constructor(protected readonly service: PartsUsedService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PartsUsed })
  async createPartsUsed(
    @common.Body() data: PartsUsedCreateInput
  ): Promise<PartsUsed> {
    return await this.service.createPartsUsed({
      data: {
        ...data,

        repair: data.repair
          ? {
              connect: data.repair,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        partName: true,
        partNumber: true,
        quantity: true,
        cost: true,

        repair: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PartsUsed] })
  @ApiNestedQuery(PartsUsedFindManyArgs)
  async partsUseds(@common.Req() request: Request): Promise<PartsUsed[]> {
    const args = plainToClass(PartsUsedFindManyArgs, request.query);
    return this.service.partsUseds({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        partName: true,
        partNumber: true,
        quantity: true,
        cost: true,

        repair: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PartsUsed })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async partsUsed(
    @common.Param() params: PartsUsedWhereUniqueInput
  ): Promise<PartsUsed | null> {
    const result = await this.service.partsUsed({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        partName: true,
        partNumber: true,
        quantity: true,
        cost: true,

        repair: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PartsUsed })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePartsUsed(
    @common.Param() params: PartsUsedWhereUniqueInput,
    @common.Body() data: PartsUsedUpdateInput
  ): Promise<PartsUsed | null> {
    try {
      return await this.service.updatePartsUsed({
        where: params,
        data: {
          ...data,

          repair: data.repair
            ? {
                connect: data.repair,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          partName: true,
          partNumber: true,
          quantity: true,
          cost: true,

          repair: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PartsUsed })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePartsUsed(
    @common.Param() params: PartsUsedWhereUniqueInput
  ): Promise<PartsUsed | null> {
    try {
      return await this.service.deletePartsUsed({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          partName: true,
          partNumber: true,
          quantity: true,
          cost: true,

          repair: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
