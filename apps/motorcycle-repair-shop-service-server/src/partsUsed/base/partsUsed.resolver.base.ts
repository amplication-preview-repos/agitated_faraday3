/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PartsUsed } from "./PartsUsed";
import { PartsUsedCountArgs } from "./PartsUsedCountArgs";
import { PartsUsedFindManyArgs } from "./PartsUsedFindManyArgs";
import { PartsUsedFindUniqueArgs } from "./PartsUsedFindUniqueArgs";
import { CreatePartsUsedArgs } from "./CreatePartsUsedArgs";
import { UpdatePartsUsedArgs } from "./UpdatePartsUsedArgs";
import { DeletePartsUsedArgs } from "./DeletePartsUsedArgs";
import { Repair } from "../../repair/base/Repair";
import { PartsUsedService } from "../partsUsed.service";
@graphql.Resolver(() => PartsUsed)
export class PartsUsedResolverBase {
  constructor(protected readonly service: PartsUsedService) {}

  async _partsUsedsMeta(
    @graphql.Args() args: PartsUsedCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PartsUsed])
  async partsUseds(
    @graphql.Args() args: PartsUsedFindManyArgs
  ): Promise<PartsUsed[]> {
    return this.service.partsUseds(args);
  }

  @graphql.Query(() => PartsUsed, { nullable: true })
  async partsUsed(
    @graphql.Args() args: PartsUsedFindUniqueArgs
  ): Promise<PartsUsed | null> {
    const result = await this.service.partsUsed(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PartsUsed)
  async createPartsUsed(
    @graphql.Args() args: CreatePartsUsedArgs
  ): Promise<PartsUsed> {
    return await this.service.createPartsUsed({
      ...args,
      data: {
        ...args.data,

        repair: args.data.repair
          ? {
              connect: args.data.repair,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PartsUsed)
  async updatePartsUsed(
    @graphql.Args() args: UpdatePartsUsedArgs
  ): Promise<PartsUsed | null> {
    try {
      return await this.service.updatePartsUsed({
        ...args,
        data: {
          ...args.data,

          repair: args.data.repair
            ? {
                connect: args.data.repair,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PartsUsed)
  async deletePartsUsed(
    @graphql.Args() args: DeletePartsUsedArgs
  ): Promise<PartsUsed | null> {
    try {
      return await this.service.deletePartsUsed(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Repair, {
    nullable: true,
    name: "repair",
  })
  async getRepair(@graphql.Parent() parent: PartsUsed): Promise<Repair | null> {
    const result = await this.service.getRepair(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
