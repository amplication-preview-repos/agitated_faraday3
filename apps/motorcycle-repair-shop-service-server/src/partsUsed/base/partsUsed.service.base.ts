/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PartsUsed as PrismaPartsUsed,
  Repair as PrismaRepair,
} from "@prisma/client";

export class PartsUsedServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PartsUsedCountArgs, "select">
  ): Promise<number> {
    return this.prisma.partsUsed.count(args);
  }

  async partsUseds(
    args: Prisma.PartsUsedFindManyArgs
  ): Promise<PrismaPartsUsed[]> {
    return this.prisma.partsUsed.findMany(args);
  }
  async partsUsed(
    args: Prisma.PartsUsedFindUniqueArgs
  ): Promise<PrismaPartsUsed | null> {
    return this.prisma.partsUsed.findUnique(args);
  }
  async createPartsUsed(
    args: Prisma.PartsUsedCreateArgs
  ): Promise<PrismaPartsUsed> {
    return this.prisma.partsUsed.create(args);
  }
  async updatePartsUsed(
    args: Prisma.PartsUsedUpdateArgs
  ): Promise<PrismaPartsUsed> {
    return this.prisma.partsUsed.update(args);
  }
  async deletePartsUsed(
    args: Prisma.PartsUsedDeleteArgs
  ): Promise<PrismaPartsUsed> {
    return this.prisma.partsUsed.delete(args);
  }

  async getRepair(parentId: string): Promise<PrismaRepair | null> {
    return this.prisma.partsUsed
      .findUnique({
        where: { id: parentId },
      })
      .repair();
  }
}
